}
# processed with bash later to retain top 20 genes only
devtools::install_github("sqjin/CellChat")
library(CellChat)
library(CellChat)
library(Seurat)
library(reticulate)
library(CellChat)
devtools::install_github("jinworks/CellChat")
library(CellChat)
install.packages('NMF')
install.packages("NMF")
devtools::install_github("jokergoo/circlize")
devtools::install_github("jokergoo/ComplexHeatmap")
library(cellchat)
library(ComplexHeatmap)
library(circlize)
library(NMF)
library(CellChat)
devtools::install_github("jinworks/CellChat")
devtools::install_github("jinworks/CellChat")
library(CellChat)
library('BiocManager')
library('Seurat')
library('monocle3')
library('SeuratWrappers')
remotes::install_github('satijalab/seurat-wrappers')
library('SeuratWrappers')
library('SeuratWrappers')
library('seurat-wrappers')
devtools::install_github("satijalab/seurat-wrappers")
library("SeuratWrappers")
library("SeuratWrappers")
setwd("//Users//coellearth//Desktop//MG_HFD//")
normaldiet <- readRDS("7.1data//ND_corrected.rds")
normaldiet$cell_type <- Idents(normaldiet)
highfatdiet <- readRDS("7.1data//HFD_corrected.rds")
highfatdiet$cell_type <- Idents(highfatdiet)
devtools::install_github("satijalab/seurat-wrappers")
devtools::install_github("satijalab/seurat-wrappers")
remotes::install_github('satijalab/seurat-wrappers')
library("SeuratWrappers")
normaldiet_cds <- as.cell_data_set(normaldiet) # transform object type
normaldiet_cds <- cluster_cells(normaldiet_cds) # re-cluster cells according to monocle arrangements
normaldiet_cds <- learn_graph(normaldiet_cds) # learn trajectory manners in cells
set.seed(123) # reproducibility
normaldiet_cds <- order_cells(normaldiet_cds) # order the cell in a pseudo-timeline
plot_cells(normaldiet_cds, color_cells_by = "pseudotime")
normaldiet_cds <- order_cells(normaldiet_cds) # order the cell in a pseudo-timeline
plot_cells(normaldiet_cds, color_cells_by = "pseudotime")
normaldiet_cds <- order_cells(normaldiet_cds) # order the cell in a pseudo-timeline
normaldiet <- readRDS("7.1data//ND_corrected.rds")
normaldiet$cell_type <- Idents(normaldiet)
highfatdiet <- readRDS("7.1data//HFD_corrected.rds")
highfatdiet$cell_type <- Idents(highfatdiet)
normaldiet_celltypes_for_cds <- Idents(normaldiet)
normaldiet_cds <- as.cell_data_set(normaldiet) # transform object type
colData(cds)$cell_type <- normaldiet_celltypes_for_cds
colData(normaldiet_cds)$cell_type <- normaldiet_celltypes_for_cds
normaldiet_cds <- cluster_cells(normaldiet_cds) # re-cluster cells according to monocle arrangements
normaldiet_cds <- learn_graph(normaldiet_cds) # learn trajectory manners in cells
set.seed(123) # reproducibility
normaldiet_cds <- order_cells(normaldiet_cds) # order the cell in a pseudo-timeline
plot_cells(normaldiet_cds, color_cells_by = "pseudotime")
plot_cells(normaldiet_cds, color_cells_by = "pseudotime")
normaldiet_cds <- order_cells(normaldiet_cds) # order the cell in a pseudo-timeline
plot_cells(normaldiet_cds, color_cells_by = "pseudotime")
setwd("/Users/coellearth/Desktop/Mammary_Gland_Diet_Project/4CellCellCommunication/NicheNet")
setwd("/Users/coellearth/Desktop/Mammary_Gland_Diet_Project/4CellCellCommunication/NicheNet")
library(Seurat)
library(nichenetr)
library(tidyverse)
organism <- "human"
if(organism == "human"){
lr_network <- readRDS(url("https://zenodo.org/record/7074291/files/lr_network_human_21122021.rds"))
ligand_target_matrix <- readRDS(url("https://zenodo.org/record/7074291/files/ligand_target_matrix_nsga2r_final.rds"))
weighted_networks <- readRDS(url("https://zenodo.org/record/7074291/files/weighted_networks_nsga2r_final.rds"))
} else if(organism == "mouse"){
lr_network <- readRDS(url("https://zenodo.org/record/7074291/files/lr_network_mouse_21122021.rds"))
ligand_target_matrix <- readRDS(url("https://zenodo.org/record/7074291/files/ligand_target_matrix_nsga2r_final_mouse.rds"))
weighted_networks <- readRDS(url("https://zenodo.org/record/7074291/files/weighted_networks_nsga2r_final_mouse.rds"))
}
lr_network <- readRDS('/InputData/lr_network_human_21122021.rds')
lr_network <- readRDS('InputData/lr_network_human_21122021.rds')
ligand_target_matrix <- readRDS("InputData/ligand_target_matrix_nsga2r_final.rds")
weighted_networks <- readRDS("InputData/weighted_networks_nsga2r_final.rds")
lr_network <- lr_network %>% distinct(from, to)
head(lr_network)
All <- readRDS("/Users/coellearth/Desktop/Mammary_Gland_Diet_Project/*originaldata/Harmony/harmony_all.rds")
expressed_genes_receiver <- get_expressed_genes(receiver, All, pct = 0.05)
receiver <- "LumProg"
expressed_genes_receiver <- get_expressed_genes(receiver, All, pct = 0.05)
all_receptors <- unique(lr_network$to)
expressed_receptors <- intersect(all_receptors, expressed_genes_receiver)
potential_ligands <- lr_network %>% filter(to %in% expressed_receptors) %>% pull(from) %>% unique()
potential_ligands
# Use lapply to get the expressed genes of every sender cell type separately here
list_expressed_genes_sender <- sender_celltypes %>% unique() %>% lapply(get_expressed_genes, seuratObj, 0.05)
sender_celltypes <- c("Adipo")
# Use lapply to get the expressed genes of every sender cell type separately here
list_expressed_genes_sender <- sender_celltypes %>% unique() %>% lapply(get_expressed_genes, seuratObj, 0.05)
# Use lapply to get the expressed genes of every sender cell type separately here
list_expressed_genes_sender <- sender_celltypes %>% unique() %>% lapply(get_expressed_genes, All, 0.05)
expressed_genes_sender <- list_expressed_genes_sender %>% unlist() %>% unique()
potential_ligands_focused <- intersect(potential_ligands, expressed_genes_sender)
# Also check
length(expressed_genes_sender)
## [1] 10568
length(potential_ligands)
## [1] 9
length(potential_ligands_focused)
condition_oi <-  "HFD"
condition_reference <- "ND"
seurat_obj_receiver <- subset(All, idents = receiver)
DE_table_receiver <-  FindMarkers(object = seurat_obj_receiver,
ident.1 = condition_oi, ident.2 = condition_reference,
group.by = "aggregate",
min.pct = 0.05) %>% rownames_to_column("gene")
View(All)
Idents(All) <- "orig.ident"
DE_table_receiver <-  FindMarkers(object = seurat_obj_receiver,
ident.1 = condition_oi, ident.2 = condition_reference,
group.by = "aggregate",
min.pct = 0.05) %>% rownames_to_column("gene")
DE_table_receiver <-  FindMarkers(object = seurat_obj_receiver,
ident.1 = condition_oi, ident.2 = condition_reference,
group.by = "orig.ident",
min.pct = 0.05) %>% rownames_to_column("gene")
geneset_oi <- DE_table_receiver %>% filter(p_val_adj <= 0.05 & abs(avg_log2FC) >= 0.25) %>% pull(gene)
geneset_oi <- geneset_oi %>% .[. %in% rownames(ligand_target_matrix)]
background_expressed_genes <- expressed_genes_receiver %>% .[. %in% rownames(ligand_target_matrix)]
length(background_expressed_genes)
## [1] 3476
length(geneset_oi)
All@meta.data[["cell_type"]]
sender_celltypes <- c("Adipo", "Stroma", "Immune", "Basal", "Endo", "HormSens")
list_expressed_genes_sender <- sender_celltypes %>% unique() %>% lapply(get_expressed_genes, All, 0.05)
setwd("/Users/coellearth/Desktop/Mammary_Gland_Diet_Project/4CellCellCommunication/NicheNet")
library(Seurat)
library(nichenetr)
library(tidyverse)
All <- readRDS("/Users/coellearth/Desktop/Mammary_Gland_Diet_Project/*originaldata/Harmony/harmony_all.rds")
lr_network <- readRDS('InputData/lr_network_human_21122021.rds')
ligand_target_matrix <- readRDS("InputData/ligand_target_matrix_nsga2r_final.rds")
weighted_networks <- readRDS("InputData/weighted_networks_nsga2r_final.rds")
lr_network <- lr_network %>% distinct(from, to)
receiver <- "LumProg"
expressed_genes_receiver <- get_expressed_genes(receiver, All, pct = 0.05)
all_receptors <- unique(lr_network$to)
expressed_receptors <- intersect(all_receptors, expressed_genes_receiver)
potential_ligands <- lr_network %>% filter(to %in% expressed_receptors) %>% pull(from) %>% unique()
sender_celltypes <- c("Adipo", "Stroma", "Immune", "Basal", "Endo", "HormSens")
list_expressed_genes_sender <- sender_celltypes %>% unique() %>% lapply(get_expressed_genes, All, 0.05)
expressed_genes_sender <- list_expressed_genes_sender %>% unlist() %>% unique()
potential_ligands_focused <- intersect(potential_ligands, expressed_genes_sender)
condition_oi <-  "HFD"
condition_reference <- "ND"
seurat_obj_receiver <- subset(All, idents = receiver)
DE_table_receiver <-  FindMarkers(object = seurat_obj_receiver,
ident.1 = condition_oi, ident.2 = condition_reference,
group.by = "orig.ident",
min.pct = 0.05) %>% rownames_to_column("gene")
geneset_oi <- DE_table_receiver %>% filter(p_val_adj <= 0.05 & abs(avg_log2FC) >= 0.25) %>% pull(gene)
geneset_oi <- geneset_oi %>% .[. %in% rownames(ligand_target_matrix)]
background_expressed_genes <- expressed_genes_receiver %>% .[. %in% rownames(ligand_target_matrix)]
length(background_expressed_genes)
## [1] 3476
length(geneset_oi)
ligand_activities <- predict_ligand_activities(geneset = geneset_oi,
background_expressed_genes = background_expressed_genes,
ligand_target_matrix = ligand_target_matrix,
potential_ligands = potential_ligands)
ligand_activities <- ligand_activities %>% arrange(-aupr_corrected) %>% mutate(rank = rank(desc(aupr_corrected)))
ligand_activities
# 1. Setup
setwd("/Users/coellearth/Desktop/Mammary_Gland_Diet_Project/4CellCellCommunication/NicheNet")
library(Seurat)
library(nichenetr)
library(tidyverse)
# 2. Load data
All <- readRDS("/Users/coellearth/Desktop/Mammary_Gland_Diet_Project/*originaldata/Harmony/harmony_all.rds")
lr_network <- readRDS('InputData/lr_network_human_21122021.rds') %>% distinct(from, to)
ligand_target_matrix <- readRDS("InputData/ligand_target_matrix_nsga2r_final.rds")
weighted_networks <- readRDS("InputData/weighted_networks_nsga2r_final.rds")
# 3. Define sender and receiver identities
receiver <- "LumProg"
sender_celltypes <- c("Adipo", "Stroma", "Immune", "Basal", "Endo", "HormSens")
# 4. Calculate average expression per celltype for filtering
exp <- AverageExpression(All, group.by = "celltype", assays = "RNA", slot = "data")
# 4. Calculate average expression per celltype for filtering
exp <- AverageExpression(All, group.by = "cell_type", assays = "RNA", slot = "data")
exp_df <- exp$RNA
# 5. Define expressed genes (non-zero in sender/receiver clusters)
expressed_genes_sender   <- rownames(exp_df)[rowSums(exp_df[, sender_celltypes] > 0) > 0]
expressed_genes_receiver <- rownames(exp_df)[exp_df[, receiver] > 0]
# 6. Background and focus gene sets for receiver
# Differential expression in receiver: HFD vs ND
seurat_obj_receiver <- subset(All, idents = receiver)
DE_table_receiver <- FindMarkers(
object = seurat_obj_receiver,
ident.1 = "HFD", ident.2 = "ND",
group.by = "orig.ident",
min.pct = 0.05
) %>% rownames_to_column("gene")
# Genes of interest: significant DE
geneset_oi <- DE_table_receiver %>%
filter(p_val_adj <= 0.05 & abs(avg_log2FC) >= 0.25) %>%
pull(gene) %>%
intersect(rownames(ligand_target_matrix))
# Background expressed in receiver for ligand-target model
background_expressed_genes <- intersect(expressed_genes_receiver, rownames(ligand_target_matrix))
# 7. Identify candidate ligands
all_ligands <- unique(lr_network$from)
expressed_ligands <- intersect(all_ligands, expressed_genes_sender)
all_receptors <- unique(lr_network$to)
expressed_receptors <- intersect(all_receptors, expressed_genes_receiver)
lr_network_expressed <- lr_network %>%
filter(from %in% expressed_ligands & to %in% expressed_receptors)
potential_ligands <- unique(lr_network_expressed$from)
# 8. Predict ligand activities
ligand_activities <- predict_ligand_activities(
geneset = geneset_oi,
background_expressed_genes = background_expressed_genes,
ligand_target_matrix = ligand_target_matrix,
potential_ligands = potential_ligands
)
# Rank by Pearson correlation (or AUPR for human)
ligand_activities <- ligand_activities %>%
arrange(-pearson) %>%
mutate(rank = rank(desc(pearson)))
# 9. Visualize ligand activity distribution
p_hist_lig_activity <- ggplot(ligand_activities, aes(x = pearson)) +
geom_histogram(color = "black", fill = "darkorange") +
geom_vline(aes(xintercept = min(top_n(ligand_activities, 40, pearson)$pearson)),
color = "red", linetype = "dashed", size = 1) +
labs(x = "Ligand activity (PCC)", y = "# ligands") +
theme_classic()
print(p_hist_lig_activity)
# 10. Select top ligands and extract ligand-target links
best_upstream_ligands <- ligand_activities %>%
top_n(40, pearson) %>%
arrange(-pearson) %>%
pull(test_ligand)
active_links_df <- best_upstream_ligands %>%
lapply(get_weighted_ligand_target_links,
geneset = geneset_oi,
ligand_target_matrix = ligand_target_matrix,
n = 250) %>%
bind_rows()
# 11. Prepare heatmap data
active_links <- prepare_ligand_target_visualization(
ligand_target_df = active_links_df,
ligand_target_matrix = ligand_target_matrix,
cutoff = 0.25
)
# 3. Define sender and receiver identities
receiver <- "LumProg"
sender_celltypes <- c("Adipo", "Stroma", "Immune", "Basal", "Endo", "HormSens")
# 4. Calculate average expression per celltype for filtering
exp <- AverageExpression(All, group.by = "celltype", assays = "RNA", slot = "data")
# 4. Calculate average expression per celltype for filtering
exp <- AverageExpression(All, group.by = "cell_type", assays = "RNA", slot = "data")
exp_df <- exp$RNA
# 5. Define expressed genes (non-zero in sender/receiver clusters)
expressed_genes_sender   <- rownames(exp_df)[rowSums(exp_df[, sender_celltypes] > 0) > 0]
expressed_genes_receiver <- rownames(exp_df)[exp_df[, receiver] > 0]
# 6. Background and focus gene sets for receiver
# Differential expression in receiver: HFD vs ND
seurat_obj_receiver <- subset(All, idents = receiver)
DE_table_receiver <- FindMarkers(
object = seurat_obj_receiver,
ident.1 = "HFD", ident.2 = "ND",
group.by = "orig.ident",
min.pct = 0.05
) %>% rownames_to_column("gene")
# Genes of interest: significant DE
geneset_oi <- DE_table_receiver %>%
filter(p_val_adj <= 0.05 & abs(avg_log2FC) >= 0.25) %>%
pull(gene) %>%
intersect(rownames(ligand_target_matrix))
# Background expressed in receiver for ligand-target model
background_expressed_genes <- intersect(expressed_genes_receiver, rownames(ligand_target_matrix))
# 7. Identify candidate ligands
all_ligands <- unique(lr_network$from)
expressed_ligands <- intersect(all_ligands, expressed_genes_sender)
all_receptors <- unique(lr_network$to)
expressed_receptors <- intersect(all_receptors, expressed_genes_receiver)
lr_network_expressed <- lr_network %>%
filter(from %in% expressed_ligands & to %in% expressed_receptors)
potential_ligands <- unique(lr_network_expressed$from)
# 8. Predict ligand activities
ligand_activities <- predict_ligand_activities(
geneset = geneset_oi,
background_expressed_genes = background_expressed_genes,
ligand_target_matrix = ligand_target_matrix,
potential_ligands = potential_ligands
)
ligand_activities <- ligand_activities %>%
arrange(-pearson) %>%
mutate(rank = rank(desc(pearson)))
# 9. Visualize ligand activity distribution
p_hist_lig_activity <- ggplot(ligand_activities, aes(x = pearson)) +
geom_histogram(color = "black", fill = "darkorange") +
geom_vline(aes(xintercept = min(top_n(ligand_activities, 40, pearson)$pearson)),
color = "red", linetype = "dashed", size = 1) +
labs(x = "Ligand activity (PCC)", y = "# ligands") +
theme_classic()
print(p_hist_lig_activity)
# 10. Select top ligands and extract ligand-target links
best_upstream_ligands <- ligand_activities %>%
top_n(40, pearson) %>%
arrange(-pearson) %>%
pull(test_ligand)
active_links_df <- best_upstream_ligands %>%
lapply(get_weighted_ligand_target_links,
geneset = geneset_oi,
ligand_target_matrix = ligand_target_matrix,
n = 250) %>%
bind_rows() %>%
drop_na()  # remove any rows with NA weights to prevent quantile errors
# 11. Prepare heatmap data
active_links <- prepare_ligand_target_visualization(
ligand_target_df = active_links_df,
ligand_target_matrix = ligand_target_matrix,
cutoff = 0.25
)
order_ligands <- rev(intersect(best_upstream_ligands, colnames(active_links)))
order_targets <- unique(active_links_df$target)
vis_mat <- active_links[order_targets[1:50], order_ligands]
order_targets
vis_mat <- active_links[order_targets[1], order_ligands]
vis_mat_t <- t(vis_mat)
p_ligand_target_network <- make_heatmap_ggplot(
vis_mat_t,
title = "Top ligands",
subtitle = "DE genes in LumProg",
color = "purple",
legend_position = "top",
x_axis_position = "top",
legend_title = "Regulatory potential"
) + scale_fill_gradient2(low = "whitesmoke", high = "purple", breaks = c(0, 0.005, 0.01)) +
theme(axis.text.x = element_text(face = "italic"))
p_ligand_target_network <- make_heatmap_ggplot(
vis_mat_t,
title = "Top ligands",
subtitle = "DE genes in LumProg",
color = "purple",
legend_position = "top",
x_axis_position = "top",
legend_title = "Regulatory potential",
y_name = " "
) + scale_fill_gradient2(low = "whitesmoke", high = "purple", breaks = c(0, 0.005, 0.01)) +
theme(axis.text.x = element_text(face = "italic"))
p_ligand_target_network <- make_heatmap_ggplot(
vis_mat_t,
title = "Top ligands",
subtitle = "DE genes in LumProg",
color = "purple",
legend_position = "top",
x_axis_position = "top",
legend_title = "Regulatory potential",
y_name = " ",
y_name = " ",
) + scale_fill_gradient2(low = "whitesmoke", high = "purple", breaks = c(0, 0.005, 0.01)) +
theme(axis.text.x = element_text(face = "italic"))
# 12. Ligand-receptor network heatmap
lr_top <- lr_network_expressed %>%
filter(from %in% best_upstream_ligands & to %in% expressed_receptors)
best_receptors <- unique(lr_top$to)
lr_sig_df <- weighted_networks$lr_sig %>%
filter(from %in% best_upstream_ligands & to %in% best_receptors)
lr_sig_mat <- lr_sig_df %>%
spread(from, weight, fill = 0) %>%
column_to_rownames("to") %>%
as.matrix()
# Cluster rows/columns
d_r <- dist(lr_sig_mat, method = "binary")
hc_r <- hclust(d_r, method = "ward.D2")
ord_r <- hc_r$labels[hc_r$order]
d_l <- dist(t(lr_sig_mat), method = "binary")
hc_l <- hclust(d_l, method = "ward.D2")
ord_l <- hc_l$labels[hc_l$order]
vis_lr <- lr_sig_mat[ord_r[1:100], ord_l]
p_lr_network <- make_heatmap_ggplot(
t(vis_lr),
title = "Ligand-Receptor interactions",
subtitle = "LumProg receptors",
color = "mediumvioletred",
x_axis_position = "top",
legend_title = "Interaction potential"
)
print(p_lr_network)
# 11. Prepare heatmap data
active_links <- prepare_ligand_target_visualization(
ligand_target_df = active_links_df,
ligand_target_matrix = ligand_target_matrix,
cutoff = 0.25
)
order_ligands <- rev(intersect(best_upstream_ligands, colnames(active_links)))
order_targets <- unique(active_links_df$target)
vis_mat <- active_links[order_targets[1:50], order_ligands]
vis_mat <- active_links[order_targets[1], order_ligands]
vis_mat_t <- t(vis_mat)
# 12. Heatmap: ligand-to-target regulatory potential
p_ligand_target_network <- make_heatmap_ggplot(
vis_mat_t,
x_name = "Top ligands",
y_name = "DE genes in LumProg",
color = "purple",
legend_position = "top",
x_axis_position = "top",
legend_title = "Regulatory potential"
) +
scale_fill_gradient2(low = "whitesmoke", high = "purple", breaks = c(0, 0.005, 0.01)) +
theme(axis.text.x = element_text(face = "italic"))
print(p_ligand_target_network)
# 5. Define expressed genes (non-zero in sender/receiver clusters)
expressed_genes_sender   <- rownames(exp_df)[rowSums(exp_df[, sender_celltypes] > 0) > 0]
# 5. Define expressed genes (non-zero in sender/receiver clusters)
expressed_genes_sender   <- rownames(exp_df)[rowSums(exp_df[, sender_celltypes] > 0) > 0]
expressed_genes_receiver <- rownames(exp_df)[exp_df[, receiver] > 0]
# 6. Background and focus gene sets for receiver
# Differential expression in receiver: HFD vs ND
seurat_obj_receiver <- subset(All, idents = receiver)
DE_table_receiver <- FindMarkers(
object = seurat_obj_receiver,
ident.1 = "HFD", ident.2 = "ND",
group.by = "orig.ident",
min.pct = 0.05
) %>% rownames_to_column("gene")
# Genes of interest: significant DE
geneset_oi <- DE_table_receiver %>%
filter(p_val_adj <= 0.05 & abs(avg_log2FC) >= 0.25) %>%
pull(gene) %>%
intersect(rownames(ligand_target_matrix))
# Background expressed in receiver for ligand-target model
background_expressed_genes <- intersect(expressed_genes_receiver, rownames(ligand_target_matrix))
# 3. Define sender and receiver identities
receiver <- "Basal"
sender_celltypes <- c("Adipo", "Stroma", "Immune", "Endo", "HormSens")
# 4. Calculate average expression per celltype for filtering
exp <- AverageExpression(All, group.by = "celltype", assays = "RNA", slot = "data")
# 4. Calculate average expression per celltype for filtering
exp <- AverageExpression(All, group.by = "cell_type", assays = "RNA", slot = "data")
exp_df <- exp$RNA
# 5. Define expressed genes (non-zero in sender/receiver clusters)
expressed_genes_sender   <- rownames(exp_df)[rowSums(exp_df[, sender_celltypes] > 0) > 0]
expressed_genes_receiver <- rownames(exp_df)[exp_df[, receiver] > 0]
# 6. Background and focus gene sets for receiver
# Differential expression in receiver: HFD vs ND
seurat_obj_receiver <- subset(All, idents = receiver)
DE_table_receiver <- FindMarkers(
object = seurat_obj_receiver,
ident.1 = "HFD", ident.2 = "ND",
group.by = "orig.ident",
min.pct = 0.05
) %>% rownames_to_column("gene")
# Genes of interest: significant DE
geneset_oi <- DE_table_receiver %>%
filter(p_val_adj <= 0.05 & abs(avg_log2FC) >= 0.25) %>%
pull(gene) %>%
intersect(rownames(ligand_target_matrix))
# Background expressed in receiver for ligand-target model
background_expressed_genes <- intersect(expressed_genes_receiver, rownames(ligand_target_matrix))
# 7. Identify candidate ligands
all_ligands <- unique(lr_network$from)
expressed_ligands <- intersect(all_ligands, expressed_genes_sender)
all_receptors <- unique(lr_network$to)
expressed_receptors <- intersect(all_receptors, expressed_genes_receiver)
lr_network_expressed <- lr_network %>%
filter(from %in% expressed_ligands & to %in% expressed_receptors)
potential_ligands <- unique(lr_network_expressed$from)
# 8. Predict ligand activities
ligand_activities <- predict_ligand_activities(
geneset = geneset_oi,
background_expressed_genes = background_expressed_genes,
ligand_target_matrix = ligand_target_matrix,
potential_ligands = potential_ligands
)
ligand_activities <- ligand_activities %>%
arrange(-pearson) %>%
mutate(rank = rank(desc(pearson)))
# 9. Visualize ligand activity distribution
p_hist_lig_activity <- ggplot(ligand_activities, aes(x = pearson)) +
geom_histogram(color = "black", fill = "darkorange") +
geom_vline(aes(xintercept = min(top_n(ligand_activities, 40, pearson)$pearson)),
color = "red", linetype = "dashed", size = 1) +
labs(x = "Ligand activity (PCC)", y = "# ligands") +
theme_classic()
print(p_hist_lig_activity)
# 10. Select top ligands and extract ligand-target links
best_upstream_ligands <- ligand_activities %>%
top_n(40, pearson) %>%
arrange(-pearson) %>%
pull(test_ligand)
active_links_df <- best_upstream_ligands %>%
lapply(get_weighted_ligand_target_links,
geneset = geneset_oi,
ligand_target_matrix = ligand_target_matrix,
n = 250) %>%
bind_rows() %>%
drop_na()  # remove any rows with NA weights
# 11. Prepare heatmap data
active_links <- prepare_ligand_target_visualization(
ligand_target_df = active_links_df,
ligand_target_matrix = ligand_target_matrix,
cutoff = 0.25
)
order_ligands <- rev(intersect(best_upstream_ligands, colnames(active_links)))
order_targets <- unique(active_links_df$target)
vis_mat <- active_links[order_targets[1], order_ligands]
order_ligands
